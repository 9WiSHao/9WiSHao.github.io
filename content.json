{"meta":{"title":"WiSHao'blog","subtitle":"WiSHao的博客","description":"终于开始记点东西","author":"WiSHao","url":"http://wishao.me","root":"/"},"pages":[{"title":"","date":"2023-07-11T01:55:09.268Z","updated":"2023-07-11T01:55:09.268Z","comments":true,"path":"404.html","permalink":"http://wishao.me/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2023-07-11T02:15:52.215Z","updated":"2023-07-11T02:15:52.215Z","comments":true,"path":"about/index.html","permalink":"http://wishao.me/about/index.html","excerpt":"","text":"我 小前端一个，被基友坑入门，一入门深似海，但是意外还挺喜欢，就一直在学 音游人，这是我的osu主页，主玩戳泡泡，球球osu大申带带 其他没什么可说的。虽然说现在的互联网上根本没有隐私可言，但是我也没有义务在这做我的简历。为我留下最后的一份神秘，好吗？若想知道更多，可以去翻我的社交账号。 碎碎念虽说自高中毕业的暑假就想搭建自己的博客了，但是初期实在是技术不足，连教程看着都费劲，就不了了之。后来学习了一些知识，却深陷我的强迫症，找不到我满意的主题。就像历史上许多重大事件都是由意外推动的一样，某天有不可抗力突然给了我一晚上的限制让我必须搭建好我的博客，我居然在几小时内完成了主题的挑选，不可思议。 差不多就这样了，或许我写的东西会很水，无所谓了，反正没人看，有个地方放点东西也挺好，也没想给谁看。如果你无意间翻看到了我的博客，恭喜你，有缘人，或许可以加一下我的社交账号？"},{"title":"所有分类","date":"2023-07-10T14:22:24.659Z","updated":"2023-07-10T14:22:24.659Z","comments":true,"path":"categories/index.html","permalink":"http://wishao.me/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2023-07-10T13:32:53.949Z","updated":"2023-07-10T13:32:53.949Z","comments":true,"path":"friends/index.html","permalink":"http://wishao.me/friends/index.html","excerpt":"","text":"欢迎捧场"},{"title":"所有标签","date":"2023-07-10T13:42:32.150Z","updated":"2023-07-10T13:42:32.150Z","comments":true,"path":"tags/index.html","permalink":"http://wishao.me/tags/index.html","excerpt":"","text":"点击查看含此标签的文章"}],"posts":[{"title":"day1初识vue","slug":"day1初识vue","date":"2023-07-10T11:00:41.000Z","updated":"2023-07-10T14:28:33.183Z","comments":true,"path":"2023/07/10/day1初识vue/","link":"","permalink":"http://wishao.me/2023/07/10/day1%E5%88%9D%E8%AF%86vue/","excerpt":"第一天 学习了vue基础语法以及vue3的组合式API","text":"第一天 学习了vue基础语法以及vue3的组合式API 一、vue基础1、引入vue基础不使用任何脚手架，直接在头部使用&lt;script src=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;引入vue 在body标签里建立一个id为app的div，随后在script标签里使用Vue.createApp().mount(&#39;#app&#39;)这就是vue的最基础的引入 2、最简单的使用在Vue.createApp()中传入对象，对象里添加data方法，return的就是vue基本数据。 1234567891011Vue.createApp(&#123; data() &#123; return &#123; foods: [ &#123; id: 1, name: &#x27;原味鱿鱼丝&#x27;, image: &#x27;./images/原味鱿鱼丝.png&#x27;, purchased: false &#125;, &#123; id: 2, name: &#x27;辣味鱿鱼丝&#x27;, image: &#x27;./images/辣味鱿鱼丝.png&#x27;, purchased: false &#125;, &#123; id: 3, name: &#x27;炭烧味鱿鱼丝&#x27;, image: &#x27;./images/炭烧味鱿鱼丝.png&#x27;, purchased: false &#125; ] &#125; &#125;,&#125;).mount(&#x27;#app&#x27;) 随后便可以在那个绑定的div中使用基础vue语法。 并且这里的对象不只有data方法，还有若干别的方法，方便拆分管理 3、v-for v-bind v-modelv-for 指令v-for 用于渲染列表，基本语法如下： 123&lt;ul&gt; &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.text &#125;&#125;&lt;/li&gt;&lt;/ul&gt; v-for 会遍历 items 数组，并为每个元素生成一个 &lt;li&gt; 元素。每个元素都通过 item 变量可以在模板中访问。key 属性是必需的，用于提高 Vue 追踪每个节点的能力，从而提高渲染性能。 v-bind 指令v-bind 用于绑定元素属性，基本语法如下： 1&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt; v-bind 将元素的 disabled 属性绑定到 Vue 实例的 isButtonDisabled 属性。如果 isButtonDisabled 属性的值是 true，则按钮会被禁用。它常用来动态设置 HTML 属性。 简写形式是 :： 1&lt;button :disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt; 非常常用的是绑定数据，还有绑定class类名 v-model 指令v-model 用于实现双向数据绑定，基本语法如下： 1&lt;input v-model=&quot;message&quot; /&gt; v-model 将 input 的 value 属性和 input 的 oninput 事件绑定到 Vue 实例的 message 属性。这样当 input 值发生变化时，message 属性也会随之更新；反之亦然。 v-model 是 Vue 提供的一种特殊语法糖，本质上它是 v-bind 和 v-on 的结合。 4、v-on v-ifv-on 指令能在html上绑定方法。所绑定的方法写在App对象里的methods属性里。比如 1&lt;form v-on:submit=&quot;add&quot;&gt;&lt;/form&gt; 可以缩写成@。然后再加上form表单触发submit事件的时候默认会刷新页面，但是我们不需要它提交表单，所以用vue提供的方法之间阻止，写成： 1&lt;form @submit.prevent=&quot;add&quot;&gt;&lt;/form&gt; v-if 指令就是把js能做的判断能写到html标签里，如果满足才显示这个标签。比如 1&lt;div v-if=&quot;items.length &gt; 3&quot;&gt;&lt;/div&gt; 满足items的长度的时候才显示这个div标签 还有v-else-if与v-else可以用，不过多赘述 5、拆分组件这是vue最核心的思想。比如首先可以把基础导入写成Vue.createApp(App).mount(&#39;#app&#39;)，然后就可以新建一个文件App.js，把东西都写在这里。然后使用es6的导出导入语法挂载 在App对象里，添加template属性，属性是反引号字符串，然后就可以把所有之前写在id为app的div里的html写在反引号里了。vue会为我们挂载并使用 6、细化拆分再在这个app.js写多了东西感觉复杂，还能细化拆分。把App对象里的所有东西都删除，只留一个template属性，再加一个components方法，用es6的导入对象，这就是要引入的东西。再新建个文件，写和app.js类似的对象导出。把传入的对象写成html标签写入App的template里，实现了组件进一步细化拆分 7、父子组件通信父传子在父组件的template里，写子组件的html标签时，添加一个属性。比如 1&lt;son :message=&quot;mes1&quot;&gt;&lt;/son&gt; 然后在子组件里添加一个props属性，是个对象，对象里是信息的名加上信息类型，就能传入信息了。比如 12345&#123; props: &#123; mes1: String, &#125;&#125; 子传父使用$emit方法，子组件可以向父组件发送事件。这个方法接收两个参数，第一个参数是事件的名称，第二个参数是随事件一起发送的数据。当子组件调用 $emit 方法时，会触发一个事件，这个事件会向上冒泡到父组件，父组件可以通过 v-on 或者 @ 对这个事件进行监听，并在回调函数中接收数据，完成子组件到父组件的通信。举例： 子组件： 12345678910&#123; template: ` &lt;button @click=&quot;notifyParent&quot;&gt;Click me&lt;/button&gt; ` methods: &#123; notifyParent() &#123; this.$emit(&#x27;childClicked&#x27;, &#x27;Hello, parent!&#x27;); &#125; &#125;&#125; 父组件： 1234567891011121314import ChildComponent from &#x27;./ChildComponent.vue&#x27;;export default &#123; components: &#123; ChildComponent &#125;, template: ` &lt;child-component @childClicked=&quot;handleChildClick&quot;&gt;&lt;/child-component&gt; `, methods: &#123; handleChildClick(message) &#123; console.log(message); // 输出 &#x27;Hello, parent!&#x27; &#125; &#125;&#125; 能够点击子组件按钮，控制台输出Hello, parent! 感觉这个语法比较费解，大致过程是： 首先，在最终要点击的子组件上绑定函数 然后在这个函数上，使用$emit方法，第一个参数是传递的名称，第二个参数是传递的信息。这样做等于是向调用它的人暴露出了第一个参数命名的属性 再然后，在父组件里，导入子组件，在template中使用此组件，并用v-on，父组件的方法监听暴露出来的属性。 这时候，父组件监听函数的定义里参数便是子组件传递的信息（即第二个参数），便能在父组件做一些事情。每当子组件的函数被调用，父组件的监听函数也就跟着被调用，完成了子传父。 二、vue3组合式API基础1、安装运行使用creat-vue脚手架构建(基于Vite) 1npm init vue@latest 2、基本文件结构根目录 index.html是最终入口，最后vue会把东西挂载至此 其他都是一些工程的配置文件 src在这里进行主要代码的书写 App.vue 根组件文件 main.js 项目的入口文件 components文件夹 存放项目使用的公共组件 assets文件夹 存放每个页面对应的css、js公共函数以及图片文件 public公共资源目录 dist存放打包好生成的文件 3、基本使用从App.vue开始vue3使用了组合式语法，简化了vue2的语法。在 &lt;script&gt; 标签内编写JavaScript，&lt;template&gt; 标签内编写HTML。使用双大括号 &#123;&#123; &#125;&#125; 包含变量或语句。 响应式数据使用 reactive() 和 ref() 使HTML中的变量可变，即JavaScript更改变量后，HTML会重新渲染新值。 ref()：创建一个响应式数据对象。ref() 返回的对象包含一个 .value 属性用于获取或设置内部值。 reactive()：接受一个普通对象并返回其代理，等同于 Vue 2.x 的Vue.observable()。 计算属性用于影响响应式数据。定义一个函数来更改响应式数据，得到的结果仍然是响应式的，可以在HTML中实时渲染。 使用 computed() 函数创建计算属性，这个函数接收一个 getter 函数并返回一个不可变的响应式 ref 对象。当依赖的响应式数据发生变化时，getter 函数会自动重新计算。 最好不要传入有副作用的函数。计算属性是只读的 监听使用 watch() 函数监听数据变化，数据发生变化时会触发回调函数。 1watch(xxx, (newVal, oldVal)=&gt;&#123;&#125;) immediate 参数：放在最后，如果指定了这个参数，将首先立即执行一次回调函数。 默认为浅层监听，即如果监听的是一个对象，对象的属性发生变化不会调用回调函数。如果要进行深度监听，需要指定 deep 参数。 如果需要精确监听某个属性，可以将回调函数改写为两个，第一个返回需要监听的属性。 生命周期函数 onBeforeMount(): 在挂载开始之前调用。 onMounted(): 在组件挂载到 DOM 后调用，可以访问和操作 DOM 元素。 onBeforeUpdate(): 在数据更新，导致的虚拟 DOM 重新渲染和打补丁之前调用。 onUpdated(): 在组件 DOM 已经更新，即数据的更改已经体现在 DOM 中之后调用。 onBeforeUnmount(): 新的生命周期函数，在组件卸载之前被调用，可以进行一些清理工作。 onUnmounted(): 在组件卸载并从 DOM 中移除后被调用。 注意： beforeCreate 和 created 在 Vue 3 的组合式 API 中没有直接的等价物。 组件父子通信 父传子：在调用子组件时，添加一个属性，即要传递的信息。子组件使用 defineProps() 来接收。如果是响应式数据，需要在添加属性时前面加一个冒号 :。 子传父：在父组件中定义变量，然后在使用子组件时添加一个属性来传递，子组件使用后可以传递信息。注意，使用子组件时需要在方法前加 @，然后子组件通过 defineEmits() 函数来生成传递方法。 模板引用为了获取DOM组件。 首先调用 ref() 函数，传入 null，然后在模板HTML中，用 ref 属性绑定该变量。这样我们就可以通过这个变量获取到DOM。注意，需要在组件挂载完成后才能获取，所以要在 onMounted 生命周期或者之后。 跨层传递数据层组件使用 provide() 函数提供数据，provide(&#39;别名&#39;, 数据)。 底层组件使用 inject() 函数获取数据，inject(&#39;别名&#39;)。","categories":[{"name":"web前端","slug":"web前端","permalink":"http://wishao.me/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"vue学习","slug":"web前端/vue学习","permalink":"http://wishao.me/categories/web%E5%89%8D%E7%AB%AF/vue%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://wishao.me/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"http://wishao.me/tags/vue/"},{"name":"暑假培训","slug":"暑假培训","permalink":"http://wishao.me/tags/%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD/"},{"name":"笔记","slug":"笔记","permalink":"http://wishao.me/tags/%E7%AC%94%E8%AE%B0/"},{"name":"自学","slug":"自学","permalink":"http://wishao.me/tags/%E8%87%AA%E5%AD%A6/"}]},{"title":"紧急事件","slug":"紧急事件","date":"2023-07-09T18:08:30.000Z","updated":"2023-07-10T14:25:29.639Z","comments":true,"path":"2023/07/10/紧急事件/","link":"","permalink":"http://wishao.me/2023/07/10/%E7%B4%A7%E6%80%A5%E4%BA%8B%E4%BB%B6/","excerpt":"","text":"晚上才看见暑假里要每日写总结传博客，遂急忙搭建此站。目前一切都是临时的，后面再做理会。大改的东西有很多，顶部栏完全没弄，访问统计也没弄，友链，关于我之类的都还没，纯毛坯房，后面再加","categories":[{"name":"建站之初","slug":"建站之初","permalink":"http://wishao.me/categories/%E5%BB%BA%E7%AB%99%E4%B9%8B%E5%88%9D/"}],"tags":[{"name":"紧急事件","slug":"紧急事件","permalink":"http://wishao.me/tags/%E7%B4%A7%E6%80%A5%E4%BA%8B%E4%BB%B6/"}],"author":"WiSHao"},{"title":"Hello World","slug":"hello-world","date":"2023-07-09T13:00:00.000Z","updated":"2023-07-10T14:28:30.274Z","comments":true,"path":"2023/07/09/hello-world/","link":"","permalink":"http://wishao.me/2023/07/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"建站之初","slug":"建站之初","permalink":"http://wishao.me/categories/%E5%BB%BA%E7%AB%99%E4%B9%8B%E5%88%9D/"}],"tags":[],"author":"volantis"}],"categories":[{"name":"web前端","slug":"web前端","permalink":"http://wishao.me/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"vue学习","slug":"web前端/vue学习","permalink":"http://wishao.me/categories/web%E5%89%8D%E7%AB%AF/vue%E5%AD%A6%E4%B9%A0/"},{"name":"建站之初","slug":"建站之初","permalink":"http://wishao.me/categories/%E5%BB%BA%E7%AB%99%E4%B9%8B%E5%88%9D/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://wishao.me/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"http://wishao.me/tags/vue/"},{"name":"暑假培训","slug":"暑假培训","permalink":"http://wishao.me/tags/%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD/"},{"name":"笔记","slug":"笔记","permalink":"http://wishao.me/tags/%E7%AC%94%E8%AE%B0/"},{"name":"自学","slug":"自学","permalink":"http://wishao.me/tags/%E8%87%AA%E5%AD%A6/"},{"name":"紧急事件","slug":"紧急事件","permalink":"http://wishao.me/tags/%E7%B4%A7%E6%80%A5%E4%BA%8B%E4%BB%B6/"}]}